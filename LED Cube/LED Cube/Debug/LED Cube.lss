
LED Cube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  008000a6  008000a6  0000053e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000477  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000201  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000311  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000250  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cc  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  8a:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void USART_init(unsigned int ubrr){
	// Set baud rate
	UBRRH = (unsigned char) (ubrr>>8);
  92:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) ubrr;
  94:	89 b9       	out	0x09, r24	; 9

	// Enable Rx, Tx and RCI
	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  96:	88 e9       	ldi	r24, 0x98	; 152
  98:	8a b9       	out	0x0a, r24	; 10

	// Set frame format: 8 data, 2 stop bits
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  9a:	8e e8       	ldi	r24, 0x8E	; 142
  9c:	80 bd       	out	0x20, r24	; 32
  9e:	08 95       	ret

000000a0 <USART_Tx>:
}

void USART_Tx(unsigned char data){
	while(!(UCSRA & (1<<UDRE)));
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_Tx>
	UDR = data;
  a4:	8c b9       	out	0x0c, r24	; 12
  a6:	08 95       	ret

000000a8 <USART_Rx>:
}

unsigned char USART_Rx(){
	while(!(UCSRA & (1<<RXC)));
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <USART_Rx>
	return UDR;
  ac:	8c b1       	in	r24, 0x0c	; 12
}
  ae:	08 95       	ret

000000b0 <__vector_13>:

ISR(USART_RXC_vect){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
	while(!(UCSRA & (1<<RXC)));
  bc:	5f 9b       	sbis	0x0b, 7	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <__vector_13+0xc>
	rxdata = UDR;
  c0:	8c b1       	in	r24, 0x0c	; 12
  c2:	80 93 64 00 	sts	0x0064, r24
	if(rxdata == 'D' && dispdata ==0){dispdata = 1; UCSRB &= ~(1<<RXCIE);}
  c6:	84 34       	cpi	r24, 0x44	; 68
  c8:	41 f4       	brne	.+16     	; 0xda <__vector_13+0x2a>
  ca:	80 91 aa 00 	lds	r24, 0x00AA
  ce:	81 11       	cpse	r24, r1
  d0:	10 c0       	rjmp	.+32     	; 0xf2 <__vector_13+0x42>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 aa 00 	sts	0x00AA, r24
  d8:	57 98       	cbi	0x0a, 7	; 10
	if(rxdata == 'P' && progdata ==0){progdata = 1; UCSRB &= ~(1<<RXCIE);}
  da:	80 91 64 00 	lds	r24, 0x0064
  de:	80 35       	cpi	r24, 0x50	; 80
  e0:	41 f4       	brne	.+16     	; 0xf2 <__vector_13+0x42>
  e2:	80 91 ab 00 	lds	r24, 0x00AB
  e6:	81 11       	cpse	r24, r1
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <__vector_13+0x42>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 ab 00 	sts	0x00AB, r24
  f0:	57 98       	cbi	0x0a, 7	; 10
}
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <EEOpen>:


void EEOpen()
{
	//Set up TWI Module
	TWBR = 5;
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
 102:	81 b1       	in	r24, 0x01	; 1
 104:	8c 7f       	andi	r24, 0xFC	; 252
 106:	81 b9       	out	0x01, r24	; 1
 108:	08 95       	ret

0000010a <init>:
}
	

void init(void)
{
	DDRA = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 10e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b00011100;
 110:	8c e1       	ldi	r24, 0x1C	; 28
 112:	84 bb       	out	0x14, r24	; 20
	//DDRD = 0xFF;

	EEOpen();
 114:	0e 94 7f 00 	call	0xfe	; 0xfe <EEOpen>
 118:	08 95       	ret

0000011a <EEWriteByte>:
unsigned char EEWriteByte(unsigned int address,unsigned char data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 11a:	34 ea       	ldi	r19, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 11c:	50 ea       	ldi	r21, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 11e:	44 e8       	ldi	r20, 0x84	; 132
unsigned char EEWriteByte(unsigned int address,unsigned char data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 120:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 122:	06 b6       	in	r0, 0x36	; 54
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <EEWriteByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
 128:	21 b1       	in	r18, 0x01	; 1
 12a:	28 7f       	andi	r18, 0xF8	; 248
 12c:	28 30       	cpi	r18, 0x08	; 8
 12e:	a1 f5       	brne	.+104    	; 0x198 <EEWriteByte+0x7e>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 130:	53 b9       	out	0x03, r21	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 132:	46 bf       	out	0x36, r20	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 134:	06 b6       	in	r0, 0x36	; 54
 136:	07 fe       	sbrs	r0, 7
 138:	fd cf       	rjmp	.-6      	; 0x134 <EEWriteByte+0x1a>
	
	}while((TWSR & 0xF8) != 0x18);
 13a:	21 b1       	in	r18, 0x01	; 1
 13c:	28 7f       	andi	r18, 0xF8	; 248
 13e:	28 31       	cpi	r18, 0x18	; 24
 140:	79 f7       	brne	.-34     	; 0x120 <EEWriteByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
 142:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 144:	94 e8       	ldi	r25, 0x84	; 132
 146:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 148:	06 b6       	in	r0, 0x36	; 54
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <EEWriteByte+0x2e>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 14e:	91 b1       	in	r25, 0x01	; 1
 150:	98 7f       	andi	r25, 0xF8	; 248
 152:	98 32       	cpi	r25, 0x28	; 40
 154:	19 f5       	brne	.+70     	; 0x19c <EEWriteByte+0x82>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
 156:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 158:	84 e8       	ldi	r24, 0x84	; 132
 15a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 15c:	06 b6       	in	r0, 0x36	; 54
 15e:	07 fe       	sbrs	r0, 7
 160:	fd cf       	rjmp	.-6      	; 0x15c <EEWriteByte+0x42>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 162:	81 b1       	in	r24, 0x01	; 1
 164:	88 7f       	andi	r24, 0xF8	; 248
 166:	88 32       	cpi	r24, 0x28	; 40
 168:	d9 f4       	brne	.+54     	; 0x1a0 <EEWriteByte+0x86>
		return FALSE;

	//Now write DATA
	TWDR=(data);
 16a:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 170:	06 b6       	in	r0, 0x36	; 54
 172:	07 fe       	sbrs	r0, 7
 174:	fd cf       	rjmp	.-6      	; 0x170 <EEWriteByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 176:	81 b1       	in	r24, 0x01	; 1
 178:	88 7f       	andi	r24, 0xF8	; 248
 17a:	88 32       	cpi	r24, 0x28	; 40
 17c:	99 f4       	brne	.+38     	; 0x1a4 <EEWriteByte+0x8a>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	86 bf       	out	0x36, r24	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 182:	06 b6       	in	r0, 0x36	; 54
 184:	04 fc       	sbrc	r0, 4
 186:	fd cf       	rjmp	.-6      	; 0x182 <EEWriteByte+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f eb       	ldi	r24, 0xBF	; 191
 18a:	9d e5       	ldi	r25, 0x5D	; 93
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <EEWriteByte+0x72>
 190:	00 c0       	rjmp	.+0      	; 0x192 <EEWriteByte+0x78>
 192:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(12);

	//Return TRUE
	return TRUE;

}
 1a6:	08 95       	ret

000001a8 <EEReadByte>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1a8:	34 ea       	ldi	r19, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 1aa:	50 ea       	ldi	r21, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 1ac:	44 e8       	ldi	r20, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1ae:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 1b0:	06 b6       	in	r0, 0x36	; 54
 1b2:	07 fe       	sbrs	r0, 7
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <EEReadByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
 1b6:	21 b1       	in	r18, 0x01	; 1
 1b8:	28 7f       	andi	r18, 0xF8	; 248
 1ba:	28 30       	cpi	r18, 0x08	; 8
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <EEReadByte+0x18>
 1be:	41 c0       	rjmp	.+130    	; 0x242 <EEReadByte+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 1c0:	53 b9       	out	0x03, r21	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 1c2:	46 bf       	out	0x36, r20	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 1c4:	06 b6       	in	r0, 0x36	; 54
 1c6:	07 fe       	sbrs	r0, 7
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <EEReadByte+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
 1ca:	21 b1       	in	r18, 0x01	; 1
 1cc:	28 7f       	andi	r18, 0xF8	; 248
 1ce:	28 31       	cpi	r18, 0x18	; 24
 1d0:	71 f7       	brne	.-36     	; 0x1ae <EEReadByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
 1d2:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 1d4:	94 e8       	ldi	r25, 0x84	; 132
 1d6:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 1d8:	06 b6       	in	r0, 0x36	; 54
 1da:	07 fe       	sbrs	r0, 7
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <EEReadByte+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 1de:	91 b1       	in	r25, 0x01	; 1
 1e0:	98 7f       	andi	r25, 0xF8	; 248
 1e2:	98 32       	cpi	r25, 0x28	; 40
 1e4:	81 f5       	brne	.+96     	; 0x246 <EEReadByte+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
 1e6:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 1e8:	84 e8       	ldi	r24, 0x84	; 132
 1ea:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 1ec:	06 b6       	in	r0, 0x36	; 54
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <EEReadByte+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 1f2:	81 b1       	in	r24, 0x01	; 1
 1f4:	88 7f       	andi	r24, 0xF8	; 248
 1f6:	88 32       	cpi	r24, 0x28	; 40
 1f8:	41 f5       	brne	.+80     	; 0x24a <EEReadByte+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1fa:	84 ea       	ldi	r24, 0xA4	; 164
 1fc:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 1fe:	06 b6       	in	r0, 0x36	; 54
 200:	07 fe       	sbrs	r0, 7
 202:	fd cf       	rjmp	.-6      	; 0x1fe <EEReadByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
 204:	81 b1       	in	r24, 0x01	; 1
 206:	88 7f       	andi	r24, 0xF8	; 248
 208:	80 31       	cpi	r24, 0x10	; 16
 20a:	09 f5       	brne	.+66     	; 0x24e <EEReadByte+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
 20c:	81 ea       	ldi	r24, 0xA1	; 161
 20e:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 214:	06 b6       	in	r0, 0x36	; 54
 216:	07 fe       	sbrs	r0, 7
 218:	fd cf       	rjmp	.-6      	; 0x214 <EEReadByte+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
 21a:	81 b1       	in	r24, 0x01	; 1
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	80 34       	cpi	r24, 0x40	; 64
 220:	c1 f4       	brne	.+48     	; 0x252 <EEReadByte+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
 222:	84 e8       	ldi	r24, 0x84	; 132
 224:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
 226:	06 b6       	in	r0, 0x36	; 54
 228:	07 fe       	sbrs	r0, 7
 22a:	fd cf       	rjmp	.-6      	; 0x226 <EEReadByte+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
 22c:	81 b1       	in	r24, 0x01	; 1
 22e:	88 7f       	andi	r24, 0xF8	; 248
 230:	88 35       	cpi	r24, 0x58	; 88
 232:	89 f4       	brne	.+34     	; 0x256 <EEReadByte+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
 234:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 236:	94 e9       	ldi	r25, 0x94	; 148
 238:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 23a:	06 b6       	in	r0, 0x36	; 54
 23c:	04 fc       	sbrc	r0, 4
 23e:	fd cf       	rjmp	.-6      	; 0x23a <EEReadByte+0x92>
 240:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
 256:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
 258:	08 95       	ret

0000025a <main>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main(void)
{
	sei();
 25a:	78 94       	sei
	init();
 25c:	0e 94 85 00 	call	0x10a	; 0x10a <init>
	USART_init(MYUBRR);
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 49 00 	call	0x92	; 0x92 <USART_init>
	USART_Tx('S');
 268:	83 e5       	ldi	r24, 0x53	; 83
 26a:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Tx>
 26e:	0f 2e       	mov	r0, r31
 270:	fc ea       	ldi	r31, 0xAC	; 172
 272:	af 2e       	mov	r10, r31
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	bf 2e       	mov	r11, r31
 278:	f0 2d       	mov	r31, r0
 27a:	8d ef       	ldi	r24, 0xFD	; 253
 27c:	9f ef       	ldi	r25, 0xFF	; 255
 27e:	1c 01       	movw	r2, r24
 280:	2a 18       	sub	r2, r10
 282:	3b 08       	sbc	r3, r11
 284:	0f 2e       	mov	r0, r31
 286:	f5 e6       	ldi	r31, 0x65	; 101
 288:	4f 2e       	mov	r4, r31
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	5f 2e       	mov	r5, r31
 28e:	f0 2d       	mov	r31, r0
 290:	02 e0       	ldi	r16, 0x02	; 2
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	04 19       	sub	r16, r4
 296:	15 09       	sbc	r17, r5
				for(j=0;j<8;j++){
					PORTA = frame[i*8+j];
					PORTC = j<<2;
				}
				//_delay_us(5);
				PORTB = 1<<i;
 298:	c1 e0       	ldi	r28, 0x01	; 1
 29a:	d0 e0       	ldi	r29, 0x00	; 0
			progdata = 0;
			UCSRB |=(1<<RXCIE);
			USART_Tx('C');
		}
		
		if(dispdata==1){
 29c:	74 2c       	mov	r7, r4
 29e:	65 2c       	mov	r6, r5
		unsigned char i = 0, j = 0, n= 0;


	while(1){
		//USART_Tx('A');
		if(progdata ==1 ){
 2a0:	80 91 ab 00 	lds	r24, 0x00AB
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	09 f0       	breq	.+2      	; 0x2aa <main+0x50>
 2a8:	c8 c0       	rjmp	.+400    	; 0x43a <main+0x1e0>
 2aa:	0f 2e       	mov	r0, r31
 2ac:	fe ee       	ldi	r31, 0xEE	; 238
 2ae:	ef 2e       	mov	r14, r31
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ff 2e       	mov	r15, r31
 2b4:	f0 2d       	mov	r31, r0
 2b6:	65 01       	movw	r12, r10
			for(j=0;j<66;j++){
				progBuffer[j] = USART_Rx();
 2b8:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Rx>
 2bc:	d6 01       	movw	r26, r12
 2be:	8d 93       	st	X+, r24
 2c0:	6d 01       	movw	r12, r26
				USART_Tx('C');
 2c2:	83 e4       	ldi	r24, 0x43	; 67
 2c4:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Tx>


	while(1){
		//USART_Tx('A');
		if(progdata ==1 ){
			for(j=0;j<66;j++){
 2c8:	ce 14       	cp	r12, r14
 2ca:	df 04       	cpc	r13, r15
 2cc:	a9 f7       	brne	.-22     	; 0x2b8 <main+0x5e>
				progBuffer[j] = USART_Rx();
				USART_Tx('C');
			}
			unsigned int baseaddr = ((progBuffer[0]<<8)+progBuffer[1])*64;
 2ce:	f5 01       	movw	r30, r10
 2d0:	c0 80       	ld	r12, Z
 2d2:	d1 2c       	mov	r13, r1
 2d4:	dc 2c       	mov	r13, r12
 2d6:	cc 24       	eor	r12, r12
 2d8:	81 81       	ldd	r24, Z+1	; 0x01
 2da:	c8 0e       	add	r12, r24
 2dc:	d1 1c       	adc	r13, r1
 2de:	00 24       	eor	r0, r0
 2e0:	d6 94       	lsr	r13
 2e2:	c7 94       	ror	r12
 2e4:	07 94       	ror	r0
 2e6:	d6 94       	lsr	r13
 2e8:	c7 94       	ror	r12
 2ea:	07 94       	ror	r0
 2ec:	dc 2c       	mov	r13, r12
 2ee:	c0 2c       	mov	r12, r0
 2f0:	0f 2e       	mov	r0, r31
 2f2:	fe ea       	ldi	r31, 0xAE	; 174
 2f4:	8f 2e       	mov	r8, r31
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	9f 2e       	mov	r9, r31
 2fa:	f0 2d       	mov	r31, r0
 2fc:	c2 0c       	add	r12, r2
 2fe:	d3 1c       	adc	r13, r3
			for(j=2;j<66;j++){
				EEWriteByte(baseaddr+j-2,progBuffer[j]);
 300:	d4 01       	movw	r26, r8
 302:	6d 91       	ld	r22, X+
 304:	4d 01       	movw	r8, r26
 306:	c6 01       	movw	r24, r12
 308:	8a 0f       	add	r24, r26
 30a:	9b 1f       	adc	r25, r27
 30c:	0e 94 8d 00 	call	0x11a	; 0x11a <EEWriteByte>
			for(j=0;j<66;j++){
				progBuffer[j] = USART_Rx();
				USART_Tx('C');
			}
			unsigned int baseaddr = ((progBuffer[0]<<8)+progBuffer[1])*64;
			for(j=2;j<66;j++){
 310:	e8 14       	cp	r14, r8
 312:	f9 04       	cpc	r15, r9
 314:	a9 f7       	brne	.-22     	; 0x300 <main+0xa6>
				EEWriteByte(baseaddr+j-2,progBuffer[j]);
			}
			
			progdata = 0;
 316:	10 92 ab 00 	sts	0x00AB, r1
			UCSRB |=(1<<RXCIE);
 31a:	57 9a       	sbi	0x0a, 7	; 10
			USART_Tx('C');
 31c:	83 e4       	ldi	r24, 0x43	; 67
 31e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Tx>
 322:	8b c0       	rjmp	.+278    	; 0x43a <main+0x1e0>
		}
		
		if(dispdata==1){
			for( j = 2;j<66;j++){
				progBuffer[j] = USART_Rx();
 324:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_Rx>
 328:	f7 01       	movw	r30, r14
 32a:	81 93       	st	Z+, r24
 32c:	7f 01       	movw	r14, r30
			UCSRB |=(1<<RXCIE);
			USART_Tx('C');
		}
		
		if(dispdata==1){
			for( j = 2;j<66;j++){
 32e:	ec 15       	cp	r30, r12
 330:	fd 05       	cpc	r31, r13
 332:	c1 f7       	brne	.-16     	; 0x324 <main+0xca>
 334:	f2 01       	movw	r30, r4
				progBuffer[j] = USART_Rx();
			}
			for( j = 2;j<66;j++){
				//USART_Tx(progBuffer[j]);
				frame[j-2] = progBuffer[j];
 336:	d4 01       	movw	r26, r8
 338:	8d 91       	ld	r24, X+
 33a:	4d 01       	movw	r8, r26
 33c:	81 93       	st	Z+, r24
		
		if(dispdata==1){
			for( j = 2;j<66;j++){
				progBuffer[j] = USART_Rx();
			}
			for( j = 2;j<66;j++){
 33e:	ca 16       	cp	r12, r26
 340:	db 06       	cpc	r13, r27
 342:	c9 f7       	brne	.-14     	; 0x336 <main+0xdc>
				//USART_Tx(progBuffer[j]);
				frame[j-2] = progBuffer[j];
			}
			dispdata = 0;
 344:	10 92 aa 00 	sts	0x00AA, r1
			UCSRB |=(1<<RXCIE);
 348:	57 9a       	sbi	0x0a, 7	; 10
 34a:	0f 2e       	mov	r0, r31
 34c:	f5 ea       	ldi	r31, 0xA5	; 165
 34e:	ef 2e       	mov	r14, r31
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	ff 2e       	mov	r15, r31
 354:	f0 2d       	mov	r31, r0
			progdata = 0;
			UCSRB |=(1<<RXCIE);
			USART_Tx('C');
		}
		
		if(dispdata==1){
 356:	62 01       	movw	r12, r4
 358:	98 01       	movw	r18, r16
 35a:	2c 0d       	add	r18, r12
 35c:	3d 1d       	adc	r19, r13
			UCSRB |=(1<<RXCIE);
		}
		
		for( j = 2;j<66;j++){
			
			frame[j-2] = EEReadByte((cstep*64)+j-2);
 35e:	80 91 a6 00 	lds	r24, 0x00A6
 362:	90 91 a7 00 	lds	r25, 0x00A7
 366:	00 24       	eor	r0, r0
 368:	96 95       	lsr	r25
 36a:	87 95       	ror	r24
 36c:	07 94       	ror	r0
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	07 94       	ror	r0
 374:	98 2f       	mov	r25, r24
 376:	80 2d       	mov	r24, r0
 378:	02 97       	sbiw	r24, 0x02	; 2
 37a:	82 0f       	add	r24, r18
 37c:	93 1f       	adc	r25, r19
 37e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <EEReadByte>
 382:	f6 01       	movw	r30, r12
 384:	81 93       	st	Z+, r24
 386:	6f 01       	movw	r12, r30
			}
			dispdata = 0;
			UCSRB |=(1<<RXCIE);
		}
		
		for( j = 2;j<66;j++){
 388:	ee 15       	cp	r30, r14
 38a:	ff 05       	cpc	r31, r15
 38c:	29 f7       	brne	.-54     	; 0x358 <main+0xfe>
			
			frame[j-2] = EEReadByte((cstep*64)+j-2);
		//USART_Tx(frame[j-2]);
		}
		
		for(n=0;n<frameloop;n++){
 38e:	80 91 60 00 	lds	r24, 0x0060
 392:	90 91 61 00 	lds	r25, 0x0061
 396:	89 2b       	or	r24, r25
 398:	69 f5       	brne	.+90     	; 0x3f4 <main+0x19a>
 39a:	35 c0       	rjmp	.+106    	; 0x406 <main+0x1ac>
			for(i = 0;i<8;i++){
				for(j=0;j<8;j++){
					PORTA = frame[i*8+j];
 39c:	91 91       	ld	r25, Z+
 39e:	9b bb       	out	0x1b, r25	; 27
					PORTC = j<<2;
 3a0:	98 2f       	mov	r25, r24
 3a2:	99 0f       	add	r25, r25
 3a4:	99 0f       	add	r25, r25
 3a6:	95 bb       	out	0x15, r25	; 21
		//USART_Tx(frame[j-2]);
		}
		
		for(n=0;n<frameloop;n++){
			for(i = 0;i<8;i++){
				for(j=0;j<8;j++){
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	88 30       	cpi	r24, 0x08	; 8
 3ac:	b9 f7       	brne	.-18     	; 0x39c <main+0x142>
					PORTA = frame[i*8+j];
					PORTC = j<<2;
				}
				//_delay_us(5);
				PORTB = 1<<i;
 3ae:	ce 01       	movw	r24, r28
 3b0:	02 2e       	mov	r0, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <main+0x15e>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <main+0x15a>
 3bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3be:	8f e9       	ldi	r24, 0x9F	; 159
 3c0:	9f e0       	ldi	r25, 0x0F	; 15
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x168>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x16e>
 3c8:	00 00       	nop
 3ca:	2f 5f       	subi	r18, 0xFF	; 255
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	48 5f       	subi	r20, 0xF8	; 248
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
			frame[j-2] = EEReadByte((cstep*64)+j-2);
		//USART_Tx(frame[j-2]);
		}
		
		for(n=0;n<frameloop;n++){
			for(i = 0;i<8;i++){
 3d2:	28 30       	cpi	r18, 0x08	; 8
 3d4:	31 05       	cpc	r19, r1
 3d6:	19 f0       	breq	.+6      	; 0x3de <main+0x184>
			progdata = 0;
			UCSRB |=(1<<RXCIE);
			USART_Tx('C');
		}
		
		if(dispdata==1){
 3d8:	fa 01       	movw	r30, r20
 3da:	86 2f       	mov	r24, r22
 3dc:	df cf       	rjmp	.-66     	; 0x39c <main+0x142>
			
			frame[j-2] = EEReadByte((cstep*64)+j-2);
		//USART_Tx(frame[j-2]);
		}
		
		for(n=0;n<frameloop;n++){
 3de:	7f 5f       	subi	r23, 0xFF	; 255
 3e0:	27 2f       	mov	r18, r23
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	80 91 60 00 	lds	r24, 0x0060
 3e8:	90 91 61 00 	lds	r25, 0x0061
 3ec:	28 17       	cp	r18, r24
 3ee:	39 07       	cpc	r19, r25
 3f0:	28 f0       	brcs	.+10     	; 0x3fc <main+0x1a2>
 3f2:	09 c0       	rjmp	.+18     	; 0x406 <main+0x1ac>
 3f4:	70 e0       	ldi	r23, 0x00	; 0
			progdata = 0;
			UCSRB |=(1<<RXCIE);
			USART_Tx('C');
		}
		
		if(dispdata==1){
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	a0 e0       	ldi	r26, 0x00	; 0
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	47 2d       	mov	r20, r7
 3fe:	56 2d       	mov	r21, r6
 400:	2b 2f       	mov	r18, r27
 402:	3a 2f       	mov	r19, r26
 404:	e9 cf       	rjmp	.-46     	; 0x3d8 <main+0x17e>
			//_delay_ms(10);
		}
		
		//_delay_ms(5);
		//USART_Tx(cstep);
		if(cstep<lstep){cstep++;}else{cstep = fstep;}
 406:	80 91 a6 00 	lds	r24, 0x00A6
 40a:	90 91 a7 00 	lds	r25, 0x00A7
 40e:	20 91 62 00 	lds	r18, 0x0062
 412:	30 91 63 00 	lds	r19, 0x0063
 416:	82 17       	cp	r24, r18
 418:	93 07       	cpc	r25, r19
 41a:	30 f4       	brcc	.+12     	; 0x428 <main+0x1ce>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 a7 00 	sts	0x00A7, r25
 422:	80 93 a6 00 	sts	0x00A6, r24
 426:	3c cf       	rjmp	.-392    	; 0x2a0 <main+0x46>
 428:	80 91 a8 00 	lds	r24, 0x00A8
 42c:	90 91 a9 00 	lds	r25, 0x00A9
 430:	90 93 a7 00 	sts	0x00A7, r25
 434:	80 93 a6 00 	sts	0x00A6, r24
 438:	33 cf       	rjmp	.-410    	; 0x2a0 <main+0x46>
			progdata = 0;
			UCSRB |=(1<<RXCIE);
			USART_Tx('C');
		}
		
		if(dispdata==1){
 43a:	80 91 aa 00 	lds	r24, 0x00AA
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	09 f0       	breq	.+2      	; 0x444 <main+0x1ea>
 442:	83 cf       	rjmp	.-250    	; 0x34a <main+0xf0>
 444:	0f 2e       	mov	r0, r31
 446:	fe ea       	ldi	r31, 0xAE	; 174
 448:	8f 2e       	mov	r8, r31
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	9f 2e       	mov	r9, r31
 44e:	f0 2d       	mov	r31, r0
 450:	0f 2e       	mov	r0, r31
 452:	fe ee       	ldi	r31, 0xEE	; 238
 454:	cf 2e       	mov	r12, r31
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	df 2e       	mov	r13, r31
 45a:	f0 2d       	mov	r31, r0
 45c:	74 01       	movw	r14, r8
 45e:	62 cf       	rjmp	.-316    	; 0x324 <main+0xca>

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
